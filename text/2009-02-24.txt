
*pci_sim_euclid_distance*[xyzzy][PCI]xyzzy lisp で 2.3.2 ユークリッド距離によるスコア

長らく積読中だった [http://www.amazon.co.jp/exec/obidos/ASIN/9780596529321/miyamuko-22/ref=nosim/:title=集合知プログラミング] を xyzzy lisp で解き始めました。

「2 章 推薦を行う」の「2.3.2 ユークリッド距離によるスコア」を xyzzy lisp で写経します。


ソースは CodeRepos に入れてあります。

http://coderepos.org/share/browser/lang/xyzzy/pci-code/site-lisp/chapter2/recommendations.l

なお、オリジナルのソースコード (Python) は以下からダウンロードできます。

http://oreilly.com/catalog/9780596529321/


**まずは、テスト用のデータの定義

さすがに本を見ながらテスト用のデータを写経するのは面倒なので、オリジナルのソースコードをダウンロードしてきて変換します。

オリジナルは Python の dictionary として定義されていますが、見た目が JSON っぽいので [http://miyamuko.s56.xrea.com/xyzzy/json/intro.htm:title=json] を使ってパースして変換すると簡単でした。

>|lisp|
(defparameter *critics*
  '(("Lisa Rose"
     ("Lady in the Water" . 2.5)
     ("Snakes on a Plane" . 3.5)
     ("Just My Luck" . 3.0)
     ("Superman Returns" . 3.5)
     ("You, Me and Dupree" . 2.5)
     ("The Night Listener" . 3.0))
    ("Gene Seymour"
     ("Lady in the Water" . 3.0)
     ("Snakes on a Plane" . 3.5)
     ("Just My Luck" . 1.5)
     ("Superman Returns" . 5.0)
     ("The Night Listener" . 3.0)
     ("You, Me and Dupree" . 3.5))
    ("Michael Phillips"
     ("Lady in the Water" . 2.5)
     ("Snakes on a Plane" . 3.0)
     ("Superman Returns" . 3.5)
     ("The Night Listener" . 4.0))
    ("Claudia Puig"
     ("Snakes on a Plane" . 3.5)
     ("Just My Luck" . 3.0)
     ("The Night Listener" . 4.5)
     ("Superman Returns" . 4.0)
     ("You, Me and Dupree" . 2.5))
    ("Mick LaSalle"
     ("Lady in the Water" . 3.0)
     ("Snakes on a Plane" . 4.0)
     ("Just My Luck" . 2.0)
     ("Superman Returns" . 3.0)
     ("The Night Listener" . 3.0)
     ("You, Me and Dupree" . 2.0))
    ("Jack Matthews"
     ("Lady in the Water" . 3.0)
     ("Snakes on a Plane" . 4.0)
     ("The Night Listener" . 3.0)
     ("Superman Returns" . 5.0)
     ("You, Me and Dupree" . 3.5))
    ("Toby"
     ("Snakes on a Plane" . 4.5)
     ("You, Me and Dupree" . 1.0)
     ("Superman Returns" . 4.0))))
||<


**連想リストのアクセッサを定義

[http://www.geocities.jp/m_hiroi/xyzzy_lisp/abclisp08.html:title=連想リスト] を [http://xyzzy.s53.xrea.com/reference/wiki.cgi?p=assoc:title=assoc] でいちいちアクセスするのは面倒なので以下の関数を定義しておきます。

>|lisp|
(defun $ (lst &rest items)
  (if items
      (apply '$ (assoc (car items) lst :test #'equal) (cdr items))
    (cdr lst)))
||<

テスト。

>|lisp|
($ *critics* "Lisa Rose" "Lady in the Water")
2.5
||<

setf できるようにするにはどうすればいいんだっけか？
すっかり忘れてしまった。


** 2.3.1 ユークリッド距離によるスコア

で、本題のユークリッド距離の計算です。

>|lisp|
(defun sim-distance (prefs person1 person2)
  ;; 二人とも評価しているアイテムのリストを得る
  (let ((si (intersection (mapcar #'car ($ prefs person1))
                          (mapcar #'car ($ prefs person2))
                          :test #'equal)))
    ;; 両者ともに評価しているものが一つもなければ 0 を返す
    (if (not si)
        0
      ;; すべての差の平方を足し合わせる
      (let ((sum-of-squares
             (reduce #'+ (mapcar #'(lambda (item)
                                     (expt (- ($ prefs person1 item)
                                              ($ prefs person2 item))
                                           2))
                                 si))))
        (/ 1 (1+ sum-of-squares))))))
||<

- 二人とも評価しているアイテムのリストを得る部分はオリジナルのコードだと for ループを回しながら dictionary を作っていたけど [http://xyzzy.s53.xrea.com/reference/wiki.cgi?p=intersection:title=intersection] して list で保持するようにした。
- 2 乗するには [http://xyzzy.s53.xrea.com/reference/wiki.cgi?p=expt:title=expt] を使う。それにしても expt がいつまでたっても覚えられない。。。
- オリジナルのコードは si を求める処理と、その後の sum_of_squares を求める処理で prefs[person1] を 2 回ループしていて無駄なので si を再利用するようにした
- 合計を求める sum はないので、[http://xyzzy.s53.xrea.com/reference/wiki.cgi?p=reduce:title=reduce] で list の要素すべてを + する (reduce じゃなくて [http://xyzzy.s53.xrea.com/reference/wiki.cgi?p=apply:title=apply] でもいいけど)。

>|lisp|
(sim-distance *critics* "Lisa Rose" "Gene Seymour")
0.1481481
||<

一応あってるみたいですね。


次は p11 2.3.2 から。
